diff --git a/drivers/mmc/core/mmc.c b/drivers/mmc/core/mmc.c
index 1622bbb..dbd94c8 100644
--- a/drivers/mmc/core/mmc.c
+++ b/drivers/mmc/core/mmc.c
@@ -132,6 +132,7 @@ static int mmc_decode_cid(struct mmc_card *card)
 		card->cid.prod_name[4]	= UNSTUFF_BITS(resp, 64, 8);
 		card->cid.prod_name[5]	= UNSTUFF_BITS(resp, 56, 8);
 		card->cid.prod_rev	= UNSTUFF_BITS(resp, 48, 8);
+		card->cid.fwrev		= card->cid.prod_rev;	/* duplicates cid.prod_rev */
 		card->cid.serial	= UNSTUFF_BITS(resp, 16, 32);
 		card->cid.month		= UNSTUFF_BITS(resp, 12, 4);
 		card->cid.year		= UNSTUFF_BITS(resp, 8, 4) + 1997;
@@ -842,6 +843,27 @@ static struct device_type mmc_type = {
 	.groups = mmc_attr_groups,
 };
 
+static const struct mmc_fixup mmc_fixups[] = {
+	/*
+	 * There is a bug in some Samsung emmc chips where the wear leveling
+	 * code can insert 32 Kbytes of zeros into the storage.  We can patch
+	 * the firmware in such chips each time they are powered on to prevent
+	 * the bug from occurring.  Only apply this patch to a particular
+	 * revision of the firmware of the specified chips.  Date doesn't
+	 * matter, so include all possible dates in min and max fields.
+	 */
+	MMC_FIXUP_REV("VYL00M", 0x15, CID_OEMID_ANY,
+		      cid_rev(0, 0x25, 1997, 1), cid_rev(0, 0x25, 2012, 12),
+		      add_quirk_mmc, MMC_QUIRK_SAMSUNG_WL_PATCH),
+	MMC_FIXUP_REV("KYL00M", 0x15, CID_OEMID_ANY,
+		      cid_rev(0, 0x25, 1997, 1), cid_rev(0, 0x25, 2012, 12),
+		      add_quirk_mmc, MMC_QUIRK_SAMSUNG_WL_PATCH),
+	MMC_FIXUP_REV("MAG4FA", 0x15, CID_OEMID_ANY,
+		      cid_rev(0, 0x25, 1997, 1), cid_rev(0, 0x25, 2012, 12),
+		      add_quirk_mmc, MMC_QUIRK_SAMSUNG_WL_PATCH),
+	END_FIXUP
+};
+
 /*
  * Select the PowerClass for the current bus width
  * If power class is defined for 4/8 bit bus in the
@@ -1094,6 +1116,10 @@ static int mmc_init_card(struct mmc_host *host, u32 ocr,
 		err = mmc_decode_cid(card);
 		if (err)
 			goto free_card;
+		/* Detect on first access quirky cards that need help when
+		 * powered-on
+		 */
+		mmc_fixup_device(card, mmc_fixups);
 	}
 
 	/*
@@ -1507,6 +1533,14 @@ static int mmc_init_card(struct mmc_host *host, u32 ocr,
 		host->card = card;
 
 	mmc_free_ext_csd(ext_csd);
+
+	/*
+	 * Patch the firmware in certain Samsung emmc chips to fix a
+	 * wear leveling bug.
+	 */
+	if (card->quirks & MMC_QUIRK_SAMSUNG_WL_PATCH)
+		mmc_fixup_samsung_fw(card);
+
 	return 0;
 
 free_card:
diff --git a/drivers/mmc/core/quirks.c b/drivers/mmc/core/quirks.c
index aca1c3c..2dd0c84 100644
--- a/drivers/mmc/core/quirks.c
+++ b/drivers/mmc/core/quirks.c
@@ -9,9 +9,15 @@
  *
  */
 
+#include <linux/slab.h>
 #include <linux/types.h>
+#include <linux/scatterlist.h>
 #include <linux/kernel.h>
 #include <linux/mmc/card.h>
+#include <linux/mmc/mmc.h>
+#include <linux/mmc/host.h>
+
+#include "mmc_ops.h"
 
 #ifndef SDIO_VENDOR_ID_TI
 #define SDIO_VENDOR_ID_TI		0x0097
@@ -102,3 +108,226 @@ void mmc_fixup_device(struct mmc_card *card, const struct mmc_fixup *table)
 	}
 }
 EXPORT_SYMBOL(mmc_fixup_device);
+
+/*
+ * Quirk code to fix bug in wear leveling firmware for certain Samsung emmc
+ * chips
+ */
+static int mmc_movi_vendor_cmd(struct mmc_card *card, unsigned int arg)
+{
+	struct mmc_command cmd = {0};
+	int err;
+	u32 status;
+
+	/* CMD62 is vendor CMD, it's not defined in eMMC spec. */
+	cmd.opcode = 62;
+	cmd.flags = MMC_RSP_R1B;
+	cmd.arg = arg;
+
+	err = mmc_wait_for_cmd(card->host, &cmd, 0);
+	if (err)
+		return err;
+
+	do {
+		err = mmc_send_status(card, &status);
+		if (err)
+			return err;
+		if (card->host->caps & MMC_CAP_WAIT_WHILE_BUSY)
+			break;
+		if (mmc_host_is_spi(card->host))
+			break;
+	} while (R1_CURRENT_STATE(status) == R1_STATE_PRG);
+
+	return err;
+}
+
+static int mmc_movi_erase_cmd(struct mmc_card *card,
+			unsigned int arg1, unsigned int arg2)
+{
+	struct mmc_command cmd = {0};
+	int err;
+	u32 status;
+
+	cmd.opcode = MMC_ERASE_GROUP_START;
+	cmd.flags = MMC_RSP_R1;
+	cmd.arg = arg1;
+
+	err = mmc_wait_for_cmd(card->host, &cmd, 0);
+	if (err)
+		return err;
+
+	memset(&cmd, 0, sizeof(struct mmc_command));
+	cmd.opcode = MMC_ERASE_GROUP_END;
+	cmd.flags = MMC_RSP_R1;
+	cmd.arg = arg2;
+
+	err = mmc_wait_for_cmd(card->host, &cmd, 0);
+	if (err)
+		return err;
+
+	memset(&cmd, 0, sizeof(struct mmc_command));
+	cmd.opcode = MMC_ERASE;
+	cmd.flags = MMC_RSP_R1B;
+	cmd.arg = 0x00000000;
+
+	err = mmc_wait_for_cmd(card->host, &cmd, 0);
+	if (err)
+		return err;
+
+	do {
+		err = mmc_send_status(card, &status);
+		if (err)
+			return err;
+		if (card->host->caps & MMC_CAP_WAIT_WHILE_BUSY)
+			break;
+		if (mmc_host_is_spi(card->host))
+			break;
+	} while (R1_CURRENT_STATE(status) == R1_STATE_PRG);
+
+	return err;
+}
+
+#define TEST_MMC_FW_PATCHING
+
+#ifdef TEST_MMC_FW_PATCHING
+static struct mmc_command wcmd;
+static struct mmc_data wdata;
+
+static void mmc_movi_read_cmd(struct mmc_card *card, u8 *buffer)
+{
+	struct mmc_request brq;
+	struct scatterlist sg;
+
+	brq.cmd = &wcmd;
+	brq.data = &wdata;
+
+	wcmd.opcode = MMC_READ_SINGLE_BLOCK;
+	wcmd.arg = 0;
+	wcmd.flags = MMC_RSP_SPI_R1 | MMC_RSP_R1 | MMC_CMD_ADTC;
+	wdata.blksz = 512;
+	brq.stop = NULL;
+	wdata.blocks = 1;
+	wdata.flags = MMC_DATA_READ;
+
+	wdata.sg = &sg;
+	wdata.sg_len = 1;
+
+	sg_init_one(&sg, buffer, 512);
+
+	mmc_set_data_timeout(&wdata, card);
+
+	mmc_wait_for_req(card->host, &brq);
+}
+#endif /* TEST_MMC_FW_PATCHING */
+
+/*
+ * Copy entire page when wear leveling is happened
+ */
+static int mmc_set_wearlevel_page(struct mmc_card *card)
+{
+	int err;
+#ifdef TEST_MMC_FW_PATCHING
+	void *buffer;
+	buffer = kmalloc(512, GFP_KERNEL);
+	if (!buffer) {
+		pr_err("Fail to alloc memory for set wearlevel\n");
+		return -ENOMEM;
+	}
+#endif /* TEST_MMC_FW_PATCHING */
+
+	/* modification vendor cmd */
+	/* enter vendor command mode */
+	err = mmc_movi_vendor_cmd(card, 0xEFAC62EC);
+	if (err)
+		goto out;
+
+	err = mmc_movi_vendor_cmd(card, 0x10210000);
+	if (err)
+		goto out;
+
+	/* set value 0x000000FF : It's hidden data
+	 * When in vendor command mode, the erase command is used to
+	 * patch the firmware in the internal sram.
+	 */
+	err = mmc_movi_erase_cmd(card, 0x0004DD9C, 0x000000FF);
+	if (err) {
+		pr_err("Fail to Set WL value1\n");
+		goto err_set_wl;
+	}
+
+	/* set value 0xD20228FF : It's hidden data */
+	err = mmc_movi_erase_cmd(card, 0x000379A4, 0xD20228FF);
+	if (err) {
+		pr_err("Fail to Set WL value2\n");
+		goto err_set_wl;
+	}
+
+err_set_wl:
+	/* exit vendor command mode */
+	err = mmc_movi_vendor_cmd(card, 0xEFAC62EC);
+	if (err)
+		goto out;
+
+	err = mmc_movi_vendor_cmd(card, 0x00DECCEE);
+	if (err)
+		goto out;
+
+#ifdef TEST_MMC_FW_PATCHING
+	/* read and verify vendor cmd */
+	/* enter vendor cmd */
+	err = mmc_movi_vendor_cmd(card, 0xEFAC62EC);
+	if (err)
+		goto out;
+
+	err = mmc_movi_vendor_cmd(card, 0x10210002);
+	if (err)
+		goto out;
+
+	err = mmc_movi_erase_cmd(card, 0x0004DD9C, 0x00000004);
+	if (err) {
+		pr_err("Fail to Check WL value1\n");
+		goto err_check_wl;
+	}
+
+	mmc_movi_read_cmd(card, (u8 *)buffer);
+	pr_debug("buffer[0] is 0x%x\n", *(u8 *)buffer);
+
+	err = mmc_movi_erase_cmd(card, 0x000379A4, 0x00000004);
+	if (err) {
+		pr_err("Fail to Check WL value2\n");
+		goto err_check_wl;
+	}
+
+	mmc_movi_read_cmd(card, (u8 *)buffer);
+	pr_debug("buffer[0] is 0x%x\n", *(u8 *)buffer);
+
+err_check_wl:
+	/* exit vendor cmd mode */
+	err = mmc_movi_vendor_cmd(card, 0xEFAC62EC);
+	if (err)
+		goto out;
+
+	err = mmc_movi_vendor_cmd(card, 0x00DECCEE);
+	if (err)
+		goto out;
+
+#endif /* TEST_MMC_FW_PATCHING */
+
+ out:
+#ifdef TEST_MMC_FW_PATCHING
+	kfree(buffer);
+#endif /* TEST_MMC_FW_PATCHING */
+	return err;
+}
+
+void mmc_fixup_samsung_fw(struct mmc_card *card)
+{
+	int err;
+
+	mmc_claim_host(card->host);
+	err = mmc_set_wearlevel_page(card);
+	mmc_release_host(card->host);
+	if (err)
+		pr_err("%s : Failed to fixup Samsung emmc firmware(%d)\n",
+			mmc_hostname(card->host), err);
+}
diff --git a/drivers/mmc/host/mshci.c b/drivers/mmc/host/mshci.c
index f93a7eb..74b941f 100644
--- a/drivers/mmc/host/mshci.c
+++ b/drivers/mmc/host/mshci.c
@@ -2046,7 +2046,17 @@ int mshci_add_host(struct mshci_host *host)
 	mmc->f_min = 400000;
 	mmc->f_max = host->max_clk;
 #ifdef CONFIG_MACH_U1
-	mmc->caps |= MMC_CAP_SDIO_IRQ;
+	/*
+	 * BrickbugAftermath:
+	 * Revert suppression of ERASE/TRIM/DISCARD eMMC commands.
+	 * 
+	 * Current kernel bugfix status:
+	 * -Brickbug: has fix
+	 * -MAG2GA TRIM bug: has fix
+	 * -Wear Leveling bug: fixed in this patch set
+	 */
+	/* mmc->caps |= MMC_CAP_SDIO_IRQ; */
+	mmc->caps |= MMC_CAP_SDIO_IRQ | MMC_CAP_ERASE;
 #else
 	mmc->caps |= MMC_CAP_SDIO_IRQ | MMC_CAP_ERASE;
 #endif
diff --git a/include/linux/mmc/card.h b/include/linux/mmc/card.h
index 8cbcc95..ae367c9 100644
--- a/include/linux/mmc/card.h
+++ b/include/linux/mmc/card.h
@@ -210,6 +210,7 @@ struct mmc_card {
 #define MMC_QUIRK_BLK_NO_CMD23	(1<<7)		/* Avoid CMD23 for regular multiblock */
 /* MoviNAND secure issue */
 #define MMC_QUIRK_MOVINAND_SECURE (1<<8)
+#define MMC_QUIRK_SAMSUNG_WL_PATCH	(1<<9)	/* Patch Samsung FW to fix wear leveling bug */
 
 	unsigned int    poweroff_notify_state;	/* eMMC4.5 notify feature */
 #define MMC_NO_POWER_NOTIFICATION	0
@@ -441,5 +442,6 @@ extern void mmc_unregister_driver(struct mmc_driver *);
 
 extern void mmc_fixup_device(struct mmc_card *card,
 			     const struct mmc_fixup *table);
+extern void mmc_fixup_samsung_fw(struct mmc_card *card);
 
 #endif
diff --git a/kernel/module.c b/kernel/module.c
index c99de29..2424b22 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -2431,9 +2431,17 @@ static int check_modinfo(struct module *mod, struct load_info *info)
 		if (err)
 			return err;
 	} else if (!same_magic(modmagic, vermagic, info->index.vers)) {
-		printk(KERN_ERR "%s: version magic '%s' should be '%s'\n",
+    	/*
+    	 * Ignore kernel module version magic mismatches.
+    	 * This hack is needed to make the patched kernel load
+    	 * kernel modules from the official CyanogenMod build.
+    	 */
+		/* printk(KERN_ERR "%s: version magic '%s' should be '%s'\n",
+		       mod->name, modmagic, vermagic);
+		return -ENOEXEC; */
+		printk(KERN_WARNING "%s: ignoring version magic mismatch,"
+		       " version magic '%s' should be '%s'\n",
 		       mod->name, modmagic, vermagic);
-		return -ENOEXEC;
 	}
 
 	if (get_modinfo(info, "staging")) {
